prop.test(num_reject_exact, nsim, alpha_sig)
# setup
n <- 15
nsim <- 10000
p <- 0.75
p0 <- p
se <- sqrt(p0 * (1 - p0) / n)
alpha_sig <- 0.1
reject_z <- logical(nsim)
reject_exact <- logical(nsim)
set.seed(20240327)
for (i in 1:nsim){
# sample the number of successes for all simulation runs
sim_succ <- rbinom(1, n, p)
# find the sample proportion
sim_phat <- sum(sim_succ)/n
# find the test statistic under the CLT
z_stat <- (sim_phat - p0) / sqrt(p0 * (1 - p0) / n)
# find the p-value for the CLT approach
p_val_z <- 1 - pnorm(z_stat)
# find the p-value for the exact sampling distribution
#p_val_exact <- binom.test(sim_succ,n,p,alternative = "greater")$p.value
# find the p-value for the exact sampling distribution using pbinom
p_val_exact <- 1 - pbinom(sim_succ - 1, n, p)
# determine whether to reject or fail to reject for both vectors of p-values
reject_z[i] <- p_val_z <= alpha_sig
reject_exact[i] <- p_val_exact <= alpha_sig
}
num_reject_z <- sum(reject_z)
prop.test(num_reject_z, nsim, alpha_sig)
num_reject_exact <- sum(reject_exact)
prop.test(num_reject_exact, nsim, alpha_sig)
# setup
n <- 15
nsim <- 10000
p <- 0.75
p0 <- p
se <- sqrt(p0 * (1 - p0) / n)
alpha_sig <- 0.1
reject_z <- logical(nsim)
reject_exact <- logical(nsim)
set.seed(20240327)
for (i in 1:nsim){
# sample the number of successes for all simulation runs
sim_succ <- rbinom(1, n, p)
# find the sample proportion
sim_phat <- sum(sim_succ)/n
# find the test statistic under the CLT
z_stat <- (sim_phat - p0) / sqrt(p0 * (1 - p0) / n)
# find the p-value for the CLT approach
p_val_z <- 1 - pnorm(z_stat)
# find the p-value for the exact sampling distribution
p_val_exact <- binom.test(sim_succ, n, p, alternative = "greater")$p.value
# determine whether to reject or fail to reject for both vectors of p-values
reject_z[i] <- p_val_z <= alpha_sig
reject_exact[i] <- p_val_exact <= alpha_sig
}
num_reject_z <- sum(reject_z)
prop.test(num_reject_z, nsim, alpha_sig)
num_reject_exact <- sum(reject_exact)
prop.test(num_reject_exact, nsim, alpha_sig)
# setup
n <- 15
nsim <- 10000
p <- 0.75
p0 <- p
se <- sqrt(p0 * (1 - p0) / n)
alpha_sig <- 0.1
reject_z <- logical(nsim)
reject_exact <- logical(nsim)
set.seed(20240327)
for (i in 1:nsim){
# sample the number of successes for all simulation runs
sim_succ <- rbinom(1, n, p)
# find the sample proportion
sim_phat <- sum(sim_succ)/n
# find the test statistic under the CLT
z_stat <- (sim_phat - p0) / sqrt(p0 * (1 - p0) / n)
# find the p-value for the CLT approach
p_val_z <- 1 - pnorm(z_stat)
# find the p-value for the exact sampling distribution
p_val_exact <- binom.test(sim_succ, n, p, alternative = "lesser")$p.value
# determine whether to reject or fail to reject for both vectors of p-values
reject_z[i] <- p_val_z <= alpha_sig
reject_exact[i] <- p_val_exact <= alpha_sig
}
# setup
n <- 15
nsim <- 10000
p <- 0.75
p0 <- p
se <- sqrt(p0 * (1 - p0) / n)
alpha_sig <- 0.1
reject_z <- logical(nsim)
reject_exact <- logical(nsim)
set.seed(20240327)
for (i in 1:nsim){
# sample the number of successes for all simulation runs
sim_succ <- rbinom(1, n, p)
# find the sample proportion
sim_phat <- sum(sim_succ)/n
# find the test statistic under the CLT
z_stat <- (sim_phat - p0) / sqrt(p0 * (1 - p0) / n)
# find the p-value for the CLT approach
p_val_z <- 1 - pnorm(z_stat)
# find the p-value for the exact sampling distribution
s <- binom.test(sim_succ, n, p, alternative = "less")$p.value
# determine whether to reject or fail to reject for both vectors of p-values
reject_z[i] <- p_val_z <= alpha_sig
reject_exact[i] <- p_val_exact <= alpha_sig
}
num_reject_z <- sum(reject_z)
prop.test(num_reject_z, nsim, alpha_sig)
num_reject_exact <- sum(reject_exact)
prop.test(num_reject_exact, nsim, alpha_sig)
# setup
n <- 15
nsim <- 10000
p <- 0.75
p0 <- p
se <- sqrt(p0 * (1 - p0) / n)
alpha_sig <- 0.1
reject_z <- logical(nsim)
reject_exact <- logical(nsim)
set.seed(20240327)
for (i in 1:nsim){
# sample the number of successes for all simulation runs
sim_succ <- rbinom(1, n, p)
# find the sample proportion
sim_phat <- sum(sim_succ)/n
# find the test statistic under the CLT
z_stat <- (sim_phat - p0) / sqrt(p0 * (1 - p0) / n)
# find the p-value for the CLT approach
p_val_z <- 1 - pnorm(z_stat)
# find the p-value for the exact sampling distribution
p_val_exact <- binom.test(sim_succ, n, p, alternative = "greater")$p.value
# determine whether to reject or fail to reject for both vectors of p-values
reject_z[i] <- p_val_z <= alpha_sig
reject_exact[i] <- p_val_exact <= alpha_sig
}
num_reject_z <- sum(reject_z)
prop.test(num_reject_z, nsim, alpha_sig)
num_reject_exact <- sum(reject_exact)
prop.test(num_reject_exact, nsim, alpha_sig)
# setup
n <- 15
nsim <- 10000
p <- 0.75
p0 <- p
se <- sqrt(p0 * (1 - p0) / n)
reject_z <- logical(nsim)
reject_exact <- logical(nsim)
set.seed(20240327)
for (i in 1:nsim) {
# sample the number of successes for all simulation runs
sim_succ <- rbinom(1, n, p)
# find the sample proportion
sim_phat <- sim_succ / n
# find the test statistic under the CLT (assuming null hypothesis is true)
z_stat <- (sim_phat - p0) / se
# find the p-value for the CLT approach
p_val_z <- 1 - pnorm(z_stat)
# find the p-value for the exact sampling distribution
p_val_exact <- binom.test(sim_succ, n, p0, alternative = "greater")$p.value
# determine whether to reject or fail to reject for both vectors of p-values
reject_z[i] <- p_val_z < 0.1
reject_exact[i] <- p_val_exact < 0.1
}
# Check Type 1 error rate for CLT approach
num_reject_z <- sum(reject_z)
prop.test(num_reject_z, nsim, p = 0.1)
# Check Type 1 error rate for exact distribution
num_reject_exact <- sum(reject_exact)
prop.test(num_reject_exact, nsim, p = 0.1)
# setup
n <- 15
nsim <- 10000
p <- 0.75
p0 <- p
se <- sqrt(p0 * (1 - p0) / n)
alpha_sig <- 0.1
reject_z <- logical(nsim)
reject_exact <- logical(nsim)
set.seed(20240327)
for (i in 1:nsim){
# sample the number of successes for all simulation runs
sim_succ <- rbinom(1, n, p)
# find the sample proportion
sim_phat <- sum(sim_succ)/n
# find the test statistic under the CLT
z_stat <- (sim_phat - p0) / sqrt(p0 * (1 - p0) / n)
# find the p-value for the CLT approach
p_val_z <- 1 - pnorm(z_stat)
# find the p-value for the exact sampling distribution
p_val_exact <- 1 - binom.test(sim_succ, n, p, alternative = "greater")$p.value
# determine whether to reject or fail to reject for both vectors of p-values
reject_z[i] <- p_val_z <= alpha_sig
reject_exact[i] <- p_val_exact <= alpha_sig
}
num_reject_z <- sum(reject_z)
prop.test(num_reject_z, nsim, alpha_sig)
num_reject_exact <- sum(reject_exact)
prop.test(num_reject_exact, nsim, alpha_sig)
# setup
n <- 15
nsim <- 10000
p <- 0.75
p0 <- p
se <- sqrt(p0 * (1 - p0) / n)
alpha_sig <- 0.1
reject_z <- logical(nsim)
reject_exact <- logical(nsim)
set.seed(20240327)
for (i in 1:nsim){
# sample the number of successes for all simulation runs
sim_succ <- rbinom(1, n, p)
# find the sample proportion
sim_phat <- sum(sim_succ)/n
# find the test statistic under the CLT
z_stat <- (sim_phat - p0) / sqrt(p0 * (1 - p0) / n)
# find the p-value for the CLT approach
p_val_z <- 1 - pnorm(z_stat)
# find the p-value for the exact sampling distribution
p_val_exact <- binom.test(sim_succ, n, p, alternative = "greater")$p.value
# determine whether to reject or fail to reject for both vectors of p-values
reject_z[i] <- p_val_z <= alpha_sig
reject_exact[i] <- p_val_exact <= alpha_sig
}
num_reject_z <- sum(reject_z)
prop.test(num_reject_z, nsim, alpha_sig)
num_reject_exact <- sum(reject_exact)
prop.test(num_reject_exact, nsim, alpha_sig)
# setup
n <- 15
p <- 0.75
observed_success <- 12  # Example: Replace with your observed number of successes
alpha <- 0.1
# Exact method (binomial distribution)
exact_p_value <- 1 - pbinom(observed_success - 1, n, p)
# CLT approach (normal distribution)
p_hat <- observed_success / n
se <- sqrt(p * (1 - p) / n)
z_stat <- (p_hat - p) / se
clt_p_value <- 1 - pnorm(z_stat)
# Determine rejection based on significance level
reject_exact <- exact_p_value < alpha
reject_clt <- clt_p_value < alpha
reject_exact
reject_clt
# setup
n <- 15
p <- 0.75
observed_success <- 12  # Example: Replace with your observed number of successes
# Exact method (binomial distribution)
exact_p_value <- 1 - pbinom(observed_success - 1, n, p)
# CLT approach (normal distribution)
p_hat <- observed_success / n
se <- sqrt(p * (1 - p) / n)
z_stat <- (p_hat - p) / se
clt_p_value <- 1 - pnorm(z_stat)
exact_p_value
clt_p_value
# setup
n <- 15
p <- 0.75
observed_success <- 12  # Example: Replace with your observed number of successes
# Exact method (binomial distribution)
exact_p_value <- pbinom(observed_success, n, p, lower.tail = FALSE)
# CLT approach (normal distribution)
p_hat <- observed_success / n
se <- sqrt(p * (1 - p) / n)
z_stat <- (p_hat - p) / se
clt_p_value <- 1 - pnorm(z_stat)
exact_p_value
clt_p_value
# setup
n <- 15
nsim <- 10000
p <- 0.75
p0 <- p
se <- sqrt(p0 * (1 - p0) / n)
alpha_sig <- 0.1
reject_z <- logical(nsim)
reject_exact <- logical(nsim)
set.seed(20240327)
for (i in 1:nsim){
# sample the number of successes for all simulation runs
sim_succ <- rbinom(1, n, p)
# find the sample proportion
sim_phat <- sum(sim_succ)/n
# find the test statistic under the CLT
z_stat <- (sim_phat - p0) / sqrt(p0 * (1 - p0) / n)
# find the p-value for the CLT approach
p_val_z <- 1 - pnorm(z_stat)
# find the p-value for the exact sampling distribution
p_val_exact <- binom.test(sim_succ, n, p, alternative = "greater")$p.value
pbinom(sim_succ, n, p, lower.tail = FALSE)
# determine whether to reject or fail to reject for both vectors of p-values
reject_z[i] <- p_val_z <= alpha_sig
reject_exact[i] <- p_val_exact <= alpha_sig
}
# setup
n <- 15
nsim <- 10000
p <- 0.75
p0 <- p
se <- sqrt(p0 * (1 - p0) / n)
alpha_sig <- 0.1
reject_z <- logical(nsim)
reject_exact <- logical(nsim)
set.seed(20240327)
for (i in 1:nsim){
# sample the number of successes for all simulation runs
sim_succ <- rbinom(1, n, p)
# find the sample proportion
sim_phat <- sum(sim_succ)/n
# find the test statistic under the CLT
z_stat <- (sim_phat - p0) / sqrt(p0 * (1 - p0) / n)
# find the p-value for the CLT approach
p_val_z <- 1 - pnorm(z_stat)
# find the p-value for the exact sampling distribution
#p_val_exact <- binom.test(sim_succ, n, p, alternative = "greater")$p.value
p_val_exact <- pbinom(sim_succ, n, p, lower.tail = FALSE)
# determine whether to reject or fail to reject for both vectors of p-values
reject_z[i] <- p_val_z <= alpha_sig
reject_exact[i] <- p_val_exact <= alpha_sig
}
num_reject_z <- sum(reject_z)
prop.test(num_reject_z, nsim, alpha_sig)
num_reject_exact <- sum(reject_exact)
prop.test(num_reject_exact, nsim, alpha_sig)
num_reject_exact <- sum(reject_exact)
prop.test(num_reject_exact, nsim, alpha_sig)
# setup
n <- 15
nsim <- 10000
p <- 0.75
p0 <- p
se <- sqrt(p0 * (1 - p0) / n)
alpha_sig <- 0.1
reject_z <- logical(nsim)
reject_exact <- logical(nsim)
set.seed(20240327)
for (i in 1:nsim){
# sample the number of successes for all simulation runs
sim_succ <- rbinom(1, n, p)
# find the sample proportion
sim_phat <- sum(sim_succ)/n
# find the test statistic under the CLT
z_stat <- (sim_phat - p0) / sqrt(p0 * (1 - p0) / n)
# find the p-value for the CLT approach
p_val_z <- 1 - pnorm(z_stat)
# find the p-value for the exact sampling distribution
p_val_exact <- binom.test(sim_succ, n, p, alternative = "greater")$p.value
# determine whether to reject or fail to reject for both vectors of p-values
reject_z[i] <- p_val_z <= alpha_sig
reject_exact[i] <- p_val_exact <= alpha_sig
}
# setup
n <- 15
nsim <- 10000
p <- 0.75
p0 <- p
se <- sqrt(p0 * (1 - p0) / n)
alpha_sig <- 0.1
reject_z <- logical(nsim)
reject_exact <- logical(nsim)
set.seed(20240327)
for (i in 1:nsim){
# sample the number of successes for all simulation runs
sim_succ <- rbinom(1, n, p)
# find the sample proportion
sim_phat <- sum(sim_succ)/n
# find the test statistic under the CLT
z_stat <- (sim_phat - p0) / sqrt(p0 * (1 - p0) / n)
# find the p-value for the CLT approach
p_val_z <- 1 - pnorm(z_stat)
# find the p-value for the exact sampling distribution
p_val_exact <- binom.test(sim_succ, n, p, alternative = "greater")$p.value
# determine whether to reject or fail to reject for both vectors of p-values
reject_z[i] <- p_val_z <= alpha_sig
reject_exact[i] <- p_val_exact <= alpha_sig
}
num_reject_z <- sum(reject_z)
prop.test(num_reject_z, nsim, alpha_sig)
num_reject_exact <- sum(reject_exact)
prop.test(num_reject_exact, nsim, alpha_sig)
nsim <- 10000
p <- 0.75
p0 <- p
se <- sqrt(p0 * (1 - p0) / n)
n <- 15
nsim <- 10000
p <- 0.75
p0 <- p
se <- sqrt(p0 * (1 - p0) / n)
reject_z <- logical(nsim)
reject_exact <- logical(nsim)
set.seed(20240327)
for (i in 1:nsim) {
# sample the number of successes for all simulation runs
sim_succ <- rbinom(1, n, p)
# find the sample proportion
sim_phat <- sim_succ / n
# find the test statistic under the CLT
z_stat <- (sim_phat - p0) / se
# find the p-value for the CLT approach
p_val_z <- pnorm(z_stat, lower.tail = TRUE)
# find the p-value for the exact sampling distribution
p_val_exact <- binom.test(sim_succ, n, p0)$p.value
# determine whether to reject or fail to reject for both vectors of p-values
reject_z[i] <- p_val_z <= 0.1
reject_exact[i] <- p_val_exact <= 0.1
}
num_reject_z <- sum(reject_z)
prop.test(num_reject_z, nsim, p = 0.1)
num_reject_exact <- sum(reject_exact)
prop.test(num_reject_exact, nsim, p = 0.1)
n <- 15
nsim <- 10000
p <- 0.75
p0 <- p
se <- sqrt(p0 * (1 - p0) / n)
reject_z <- logical(nsim)
reject_exact <- logical(nsim)
set.seed(20240327)
for (i in 1:nsim) {
# sample the number of successes for all simulation runs
sim_succ <- rbinom(1, n, p)
# find the sample proportion
sim_phat <- sim_succ / n
# find the test statistic under the CLT
z_stat <- (sim_phat - p0) / se
# find the p-value for the CLT approach
p_val_z <- pnorm(z_stat, lower.tail = TRUE)
# find the p-value for the exact sampling distribution
p_val_exact <- binom.test(sim_succ, n, p0, alternative ='greater')$p.value
# determine whether to reject or fail to reject for both vectors of p-values
reject_z[i] <- p_val_z <= 0.1
reject_exact[i] <- p_val_exact <= 0.1
}
num_reject_z <- sum(reject_z)
prop.test(num_reject_z, nsim, p = 0.1)
num_reject_exact <- sum(reject_exact)
prop.test(num_reject_exact, nsim, p = 0.1)
n <- 15
nsim <- 10000
p <- 0.75
p0 <- p
se <- sqrt(p0 * (1 - p0) / n)
reject_z <- logical(nsim)
reject_exact <- logical(nsim)
set.seed(20240327)
for (i in 1:nsim) {
# sample the number of successes for all simulation runs
sim_succ <- rbinom(1, n, p)
# find the sample proportion
sim_phat <- sim_succ / n
# find the test statistic under the CLT
z_stat <- (sim_phat - p0) / se
# find the p-value for the CLT approach
p_val_z <- pnorm(z_stat, lower.tail = TRUE)
# find the p-value for the exact sampling distribution
p_val_exact <- binom.test(sim_succ, n, p0, alternative ='greater')$p.value
# determine whether to reject or fail to reject for both vectors of p-values
reject_z[i] <- p_val_z <= 0.1
reject_exact[i] <- p_val_exact <= 0.1
}
# setup
n <- 15
nsim <- 10000
p <- 0.75
p0 <- p
se <- sqrt(p0 * (1 - p0) / n)
alpha_sig <- 0.1
reject_z <- logical(nsim)
reject_exact <- logical(nsim)
set.seed(20240327)
for (i in 1:nsim){
# sample the number of successes for all simulation runs
sim_succ <- rbinom(1, n, p)
# find the sample proportion
sim_phat <- sum(sim_succ)/n
# find the test statistic under the CLT
z_stat <- (sim_phat - p0) / sqrt(p0 * (1 - p0) / n)
# find the p-value for the CLT approach
p_val_z <- pnorm(z_stat)
# find the p-value for the exact sampling distribution
p_val_exact <- binom.test(sim_succ, n, p, alternative = "greater")$p.value
# determine whether to reject or fail to reject for both vectors of p-values
reject_z[i] <- p_val_z <= alpha_sig
reject_exact[i] <- p_val_exact <= alpha_sig
}
num_reject_z <- sum(reject_z)
prop.test(num_reject_z, nsim, alpha_sig)
num_reject_exact <- sum(reject_exact)
prop.test(num_reject_exact, nsim, alpha_sig)
source("D:/Documents/Python Stuff - Programming/AMOD Big Data research project/Wild-Yak--Takin--and-High-Altitude-Bovids---Genomic-and-Geographic-Adaptations/Gene_Feature_Extraction/6_GOandKegg_Pathways/run_go_enrichment_from_interpro.R")
source("D:/Documents/Python Stuff - Programming/AMOD Big Data research project/Wild-Yak--Takin--and-High-Altitude-Bovids---Genomic-and-Geographic-Adaptations/Gene_Feature_Extraction/6_GOandKegg_Pathways/run_go_enrichment_from_interpro.R")
source("D:/Documents/Python Stuff - Programming/AMOD Big Data research project/Wild-Yak--Takin--and-High-Altitude-Bovids---Genomic-and-Geographic-Adaptations/Gene_Feature_Extraction/6_GOandKegg_Pathways/run_go_enrichment_from_interpro.R")
source("D:/Documents/Python Stuff - Programming/AMOD Big Data research project/Wild-Yak--Takin--and-High-Altitude-Bovids---Genomic-and-Geographic-Adaptations/Gene_Feature_Extraction/6_GOandKegg_Pathways/run_go_enrichment_from_interpro.R")
source("D:/Documents/Python Stuff - Programming/AMOD Big Data research project/Wild-Yak--Takin--and-High-Altitude-Bovids---Genomic-and-Geographic-Adaptations/Gene_Feature_Extraction/6_GOandKegg_Pathways/run_go_enrichment_from_interpro.R")
pwd
dir
getwd()
setwd('D:\Documents\Python Stuff - Programming\AMOD Big Data research project\Wild-Yak--Takin--and-High-Altitude-Bovids---Genomic-and-Geographic-Adaptations - NONGITHUB\Gene_Feature_Extraction\6_GOandKegg_Pathways')
setwd("D:\\Documents\\Python Stuff - Programming\\AMOD Big Data research project\\Wild-Yak--Takin--and-High-Altitude-Bovids---Genomic-and-Geographic-Adaptations - NONGITHUB\\Gene_Feature_Extraction\\6_GOandKegg_Pathways")
getwd()
source("D:/Documents/Python Stuff - Programming/AMOD Big Data research project/Wild-Yak--Takin--and-High-Altitude-Bovids---Genomic-and-Geographic-Adaptations/Gene_Feature_Extraction/6_GOandKegg_Pathways/run_go_enrichment_from_interpro.R")
source("D:/Documents/Python Stuff - Programming/AMOD Big Data research project/Wild-Yak--Takin--and-High-Altitude-Bovids---Genomic-and-Geographic-Adaptations/Gene_Feature_Extraction/6_GOandKegg_Pathways/run_go_enrichment_from_interpro.R")
source("D:/Documents/Python Stuff - Programming/AMOD Big Data research project/Wild-Yak--Takin--and-High-Altitude-Bovids---Genomic-and-Geographic-Adaptations/Gene_Feature_Extraction/6_GOandKegg_Pathways/run_go_enrichment_from_interpro.R")
source("D:/Documents/Python Stuff - Programming/AMOD Big Data research project/Wild-Yak--Takin--and-High-Altitude-Bovids---Genomic-and-Geographic-Adaptations/Gene_Feature_Extraction/6_GOandKegg_Pathways/run_go_enrichment_from_interpro.R")
